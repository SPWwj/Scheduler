@page "/schedule/{RoomID?}"
@using System.Globalization
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using Scheduler.Shared
@using Scheduler.Shared.Utilis
@using System.Text.Json.Serialization
@using System.Collections.ObjectModel
@using static Scheduler.Shared.ScheduleData
@implements IDisposable
@inject NavigationManager NavigationManager
@inject MenuItemState MenuItemState


<SfDialog Width="250px" IsModal="true" Visible="DialogVisible">
    <DialogTemplates>
        <Content>
            <label>Enter Your Name</label>
            <SfTextBox Placeholder='Name' FloatLabelType='@FloatLabelType.Auto' @bind-Value="Username" />
            <SfButton @onclick="addName" CssClass="e-flat" IsPrimary="true" IconCss="e-icons e-people" Content="ENTER">
            </SfButton>
        </Content>


    </DialogTemplates>
</SfDialog>


<div class="schedule-container">
    <SfAccordion>
        <AccordionItems>
            <AccordionItem>
                <HeaderTemplate>
                    <div>@($"{NavigationManager.Uri}/{RoomID}")</div>
                </HeaderTemplate>
                <ContentTemplate>
                    <div style="text-align: center;" class="text-content">
                        <span>Greetingsx: @Username</span>
                        <span>Import Your Timetable</span>
                        @foreach (var s in Timetables)
                        {
                            <div class='e-input-group'>
                                <SfButton class="btn-cross-light" IconCss="e-icons e-close"
                                      @onclick="(() => HandleUpdateTimetable(s.Id))"></SfButton>
                                <SfTooltip ID="Tooltip" class="url-tooltip" Target="@($"#url-{s.Id}")"
                                       Content="@s.Url">
                                    <SfTextBox id="@($"url-{s.Id}")" class="url-list" Readonly="true"
                                           Value="@($"{s.Name} {s.Id}")" />
                                </SfTooltip>
                            </div>
                        }
                        <SfTextBox Placeholder="Timetable Share Url" ShowClearButton=true @bind-Value="urlString"
                                   FloatLabelType="@FloatLabelType.Auto" />
                        <SfButton disabled="@(!IsConnected)" CssClass="e-round" class="btn-url-add"
                                  IconCss="e-icons e-plus-icon" @onclick="() => HandleUpdateTimetable(null)">
                        </SfButton>
                    </div>
                </ContentTemplate>
            </AccordionItem>
        </AccordionItems>
    </SfAccordion>
    <SfSchedule TValue="AppointmentData" Width="100%">
        <ScheduleEvents TValue="AppointmentData" OnActionBegin="OnActionBegin" />
        <ScheduleEventSettings DataSource="@DataSource" AllowEditFollowingEvents="true"></ScheduleEventSettings>
        <ScheduleResources>
            <ScheduleResource TItem="ResourceData" TValue="int[]" DataSource="@OwnersData" Field="OwnerId" Title="Owner"
                              Name="Owners" TextField="OwnerText" IdField="Id" ColorField="OwnerColor" AllowMultiple="true">
            </ScheduleResource>
        </ScheduleResources>
        <ScheduleViews>
            <ScheduleView Option="View.Day"></ScheduleView>
            <ScheduleView Option="View.Week"></ScheduleView>
            <ScheduleView Option="View.WorkWeek"></ScheduleView>
            <ScheduleView Option="View.Month"></ScheduleView>
            <ScheduleView Option="View.Agenda"></ScheduleView>
        </ScheduleViews>

    </SfSchedule>
</div>

<SfToast @ref="ToastObj" Title="New Timetable Added" Content="@ToastContent" Timeout="3000">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>
@code {

    [Parameter]
    public string? RoomID { get; set; }
    private string urlString { get; set; } = "";
    private List<TimetableLink> Timetables { get; set; } = new List<TimetableLink>();
    private string ToastContent { get; set; } = "Action completed";

    private List<AppointmentData> DataSource { get; set; } = new List<AppointmentData>();
    SfToast ToastObj = new SfToast();
    private List<ResourceData> OwnersData { get; set; } = new List<ResourceData>
    {
        new ResourceData{ OwnerText = "Nancy", Id = 1, OwnerGroupId = 1, OwnerColor = "#ffaa00" },
        new ResourceData{ OwnerText = "Steven", Id = 2, OwnerGroupId = 2, OwnerColor = "#f8a398" },
        new ResourceData{ OwnerText = "Michael", Id = 3, OwnerGroupId = 1, OwnerColor = "#7499e1" }
    };
    string myUrl =
    "https://nusmods.com/timetable/sem-2/share?CS1231S=TUT:05,LEC:1&CS2030S=REC:06,LAB:16B,LEC:1&CS2100=LAB:07,TUT:17,LEC:1&ES1103=SEC:A07&MA1521=LEC:1,TUT:6";


    private bool _dialogVisible = true;
    private bool DialogVisible
    {
        get { return Username == string.Empty ? true : _dialogVisible; }
        set { _dialogVisible = value; }
    }

    public string Username { get; set; } = string.Empty;
    private void addName()
    {
        if (Username != string.Empty) { DialogVisible = false; }
    }
    private HubConnection? hubConnection;

    private async void HandleUpdateTimetable(Guid? id)
    {
        urlString = myUrl;// delete this

        ScheduleData scheduleData = new()
            {
                Name = Username,
                RoomID = RoomID!,
                Event = ScheduleEvent.Event.Timetable,
                EventType = id == null ? ScheduleEvent.EventType.Add : ScheduleEvent.EventType.Delete,
                TimetableLinks = new List<TimetableLink>()
                {
                    new TimetableLink()
                       {
                           Name = Username,
                           Url = urlString,
                           OwerID = "",
                           Id = id == null ? Guid.NewGuid() : (Guid)id!
                       }
                }
            };
        if (hubConnection is not null)
        {

            await hubConnection.SendAsync("SendMessage", scheduleData);
        }
        urlString = "";
 

    }

    private async void UpdateTimeTable(string toast)
    {
        ModuleToSchedule moduleToSchedule = new ModuleToSchedule();
        await moduleToSchedule.DecodeTimetables(Timetables.ToList());
        DataSource = moduleToSchedule.Data;
        ToastContent = toast;
        this.StateHasChanged();
        await this.ToastObj.ShowAsync();
        ToastContent = "";
    }
    public async void OnActionBegin(ActionEventArgs<AppointmentData> args)
    {


        if (hubConnection is not null 
            && (args.ActionType == ActionType.EventCreate || args.ActionType == ActionType.EventChange || args.ActionType == ActionType.EventRemove))
        {
            args.Cancel = true;
            ScheduleData scheduleData = new ScheduleData()
                {
                    Name = Username,
                    RoomID = RoomID!,
                    Event = ScheduleEvent.Event.Appointment
                };

            switch (args.ActionType)
            {
                case (ActionType.EventCreate):
                    args.AddedRecords.ForEach(v => v.Subject = $"{Username} {v.Subject}");

                    scheduleData.Appointments = args.AddedRecords;
                    scheduleData.EventType = ScheduleEvent.EventType.Add;
                    break;
                case (ActionType.EventChange):
                    scheduleData.Appointments = args.ChangedRecords;
                    scheduleData.EventType = ScheduleEvent.EventType.Edit;
                    break;
                case (ActionType.EventRemove):
                    scheduleData.Appointments = args.DeletedRecords;
                    scheduleData.EventType = ScheduleEvent.EventType.Delete;
                    break;
                default:
                    break;
            }
            await hubConnection.SendAsync("SendMessage", scheduleData);
        }



    }
 

    private async Task JoinRoom()
    {
        Console.WriteLine(hubConnection?.State);
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("JoinRoom", RoomID);
        }
    }

    public bool IsConnected =>
    hubConnection?.State == HubConnectionState.Connected;
    protected async override void OnInitialized()
    {
        MenuItemState.SetCurrentURL("schedule");
        RoomID = RoomID == null ? Guid.NewGuid().ToString() : RoomID;
        NavigationManager.NavigateTo($"/schedule/{RoomID}");

        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("https://localhost:7104/chathub"))
        .Build();

        hubConnection.On<ScheduleData>("ReceiveMessage", async (scheduleData) =>
        {
            switch (scheduleData.Event)
            {
                case (ScheduleEvent.Event.Timetable):
                    switch (scheduleData.EventType)
                    {
                        case (ScheduleEvent.EventType.Add):
                            Timetables.AddRange(scheduleData.TimetableLinks);

                            UpdateTimeTable("Table Added");
                            break;
                        case (ScheduleEvent.EventType.Delete):
                            Timetables.RemoveAll(t => scheduleData.TimetableLinks.Any(a => a.Id == t.Id));
                            
                            UpdateTimeTable("Table Deleted");
                            break;
                    }
                    break;
                case (ScheduleEvent.Event.Appointment):
                    switch (scheduleData.EventType)
                    {
                        case (ScheduleEvent.EventType.Add):
                            scheduleData.Appointments.AddRange(DataSource);
                            DataSource = scheduleData.Appointments;
                            ToastContent = "Apt Added";

                            break;
                        case (ScheduleEvent.EventType.Delete):
                            DataSource = DataSource.Where(d => !scheduleData.Appointments.Any(x => x.Id == d.Id)).ToList();
                            ToastContent = "Apt Deleted";

                            break;
                        case (ScheduleEvent.EventType.Edit):
                            scheduleData.Appointments.AddRange(DataSource.Where(d => !scheduleData.Appointments.Any(x => x.Id == d.Id)).ToList());
                            DataSource = scheduleData.Appointments;
                            ToastContent = "Apt Edited";

                            break;
                        default:
                            break;
                    }
                    StateHasChanged();
                    await this.ToastObj.ShowAsync();
                    ToastContent = "";

                    break;
                default:
                    Console.WriteLine($"Unkown {scheduleData}");
                    break;
            }
        });

        await hubConnection.StartAsync();
        await JoinRoom();
    }

    public async void Dispose()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}
