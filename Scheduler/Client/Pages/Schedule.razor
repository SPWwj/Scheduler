@page "/schedule/{RoomID?}"
@using Microsoft.AspNetCore.SignalR.Client
@using Scheduler.Shared
@using Scheduler.Shared.Utilis
@using System.Drawing
@using System.Collections.ObjectModel
@implements IDisposable
@inject NavigationManager NavigationManager
@inject MenuItemState MenuItemState
<style>
    #list {
        box-shadow: 0 1px 4px #ddd;
        border-bottom: 1px solid #ddd;
        margin: 0 auto;
        border: 1px solid #ccc;
    }

        #list .e-list-item {
            height: auto;
            cursor: pointer;
            line-height: 22px;
            padding: 8px;
        }

        #list.e-listview .e-list-header {
            background-color: orange;
            color: white;
        }

        #list .e-list-item.e-active {
            background-color: transparent;
        }

        #list .e-list-item.e-hover {
            background-color: transparent;
        }

    .padding {
        padding: 4px;
    }

    .right__align {
        text-align: right;
        margin-right: 8px;
        padding-right: 8px;
    }

    .left__align {
        margin-left: 8px;
        padding-left: 8px;
    }

    .content__container {
        background-color: aliceblue;
    }

    .flex {
        display: flex;
    }

    .flex__center {
        justify-content: center;
    }

    .vertical__center {
        align-items: center;
    }

    .vertical {
        flex-direction: column;
    }

    .flex__order__1 {
        order: 1;
    }

    .flex__order__2 {
        order: 2;
    }

    .flex__1 {
        flex: 1;
    }

    .flex__2 {
        flex: 2;
    }

    .flex__3 {
        flex: 3;
    }

    .flex__5 {
        flex: 5;
    }

    .flex__8 {
        flex: 8;
    }

    .bold {
        font-weight: 500;
    }

    .margin {
        margin: 10px;
        width: 350px;
    }

    .small__font {
        font-size: 13px;
        margin: 2px 0;
    }
</style>

<SfDialog Width="250px" IsModal="true" Visible="DialogVisible">
    <DialogTemplates>
        <Content>
            <label>Enter Your Name</label>
            <SfTextBox Placeholder='Name' FloatLabelType='@FloatLabelType.Auto' @bind-Value="Username" />
            <SfButton @onclick="addName" CssClass="e-flat" IsPrimary="true" IconCss="e-icons e-people" Content="ENTER">
            </SfButton>
        </Content>


    </DialogTemplates>
</SfDialog>
<SfSidebar Position=SidebarPosition.Right Width="250px" Created="onSidebarCreate" @ref="sidebarObj"
           @bind-IsOpen="MenuItemState.ToggleSidebar">
    <ChildContent>
        <SfListView ID="list" DataSource="@chatMessages" ShowHeader="true" @onclick="CloseSidebar" HeaderTitle="Chat">
            <ListViewFieldSettings TValue="ChatMessage" Id="Id" Text="Name"></ListViewFieldSettings>
            <ListViewTemplates TValue="ChatMessage">
                <Template>
                    @{
                        ChatMessage currentData = context as ChatMessage;
                        <div class="flex item__container">
                            <div class="flex content__container flex__8 vertical padding @(currentData.SenderId == userData.Id ? "right__align" : "left__align")">
                                <div class="bold">@currentData.Name</div>
                                <div class="small__font">@currentData.Text</div>
                            </div>
                        </div>
                    }
                </Template>
            </ListViewTemplates>
        </SfListView>
        <div class="flex">
            <div class="flex__8 padding">
                <SfTextBox @ref="@chatInput" Placeholder="Type your message"></SfTextBox>
            </div>
            <div class="flex__1">
                <SfButton @onclick="OnSend" IsPrimary="true">Send</SfButton>
            </div>
        </div>
    </ChildContent>
</SfSidebar>

<div class="schedule-container">
    <SfAccordion>
        <AccordionItems>
            <AccordionItem>
                <HeaderTemplate>
                    <div>@($"{NavigationManager.Uri}/{RoomID}")</div>
                </HeaderTemplate>
                <ContentTemplate>
                    <div style="text-align: center;" class="text-content">
                        <span>Greetingsx: @Username</span>
                        <span>Current UpdateCount @UpdateCount</span>

                        <span>Import Your Timetable</span>
                        @foreach (var s in Timetables)
                        {
                            <div class='e-input-group'>
                                <SfButton class="btn-cross-light" IconCss="e-icons e-close"
                                      @onclick="(() => HandleUpdateTimetable(s.Id))"></SfButton>
                                <SfTooltip ID="Tooltip" class="url-tooltip" Target="@($"#url-{s.Id}")" Content="@s.Url">
                                    <SfTextBox id="@($"url-{s.Id}")" class="url-list" Readonly="true"
                                           Value="@($"{s.Name} {s.Url}")" />
                                </SfTooltip>
                            </div>
                        }
                        <SfTextBox Placeholder="Timetable Share Url" ShowClearButton=true @bind-Value="urlString"
                                   FloatLabelType="@FloatLabelType.Auto" />
                        <SfButton disabled="@(!IsConnected)" CssClass="e-round" class="btn-url-add"
                                  IconCss="e-icons e-plus-icon" @onclick="() => HandleUpdateTimetable(null)">
                        </SfButton>
                    </div>
                </ContentTemplate>
            </AccordionItem>
        </AccordionItems>
    </SfAccordion>
    <SfSchedule TValue="AppointmentData" Width="100%">
        <ScheduleEvents TValue="AppointmentData" OnActionBegin="OnActionBegin" />
        <ScheduleEventSettings DataSource="@DataSource" AllowEditFollowingEvents="true"></ScheduleEventSettings>
        <ScheduleResources>
            <ScheduleResource TItem="UserData" TValue="Guid" Title="Owner" Name="Owners" TextField="Name"
                              DataSource="@UserDatas" Field="UserDataId" IdField="Id" ColorField="ThemeColor">
            </ScheduleResource>
        </ScheduleResources>
        <ScheduleViews>
            <ScheduleView Option="View.Day"></ScheduleView>
            <ScheduleView Option="View.Week"></ScheduleView>
            <ScheduleView Option="View.WorkWeek"></ScheduleView>
            <ScheduleView Option="View.Month"></ScheduleView>
            <ScheduleView Option="View.Agenda"></ScheduleView>
        </ScheduleViews>

    </SfSchedule>
</div>

<SfToast @ref="ToastObj" Title="New Timetable Added" Content="@ToastContent" Timeout="3000">
    <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>
@code {
    [Parameter]
    public string? RoomID { get; set; }
    private string urlString { get; set; } = "";
    public string Username { get; set; } = string.Empty;
    private UserData userData = new UserData();
    public int UpdateCount { get; set; } = 0;
    SfTextBox chatInput;

    private async void addName()
    {
        if (Username != string.Empty)
        {

            userData = new UserData()
                {
                    Name = Username,
                    Id = Guid.NewGuid(),
                    RoomID = RoomID!,
                    ThemeColor = ColorsHelper.Colors[new Random().Next(0, ColorsHelper.Colors.Count)]
                };
            DialogVisible = false;
            if (hubConnection is not null)
            {
                ScheduleData scheduleData = new()
                    {
                        RoomID = RoomID!,
                        Name = userData.Name,
                        Event = ScheduleEvent.Event.UserEvent,
                        EventType = ScheduleEvent.EventType.Add,
                        UserDatas = new List<UserData>()
                        {
                            userData
                        }
                    };
                await hubConnection.SendAsync("SendMessage", scheduleData);
            }
            this.StateHasChanged();
        }
    }
    private List<TimetableLink> Timetables { get; set; } = new List<TimetableLink>();
    private List<AppointmentData> DataSource { get; set; } = new List<AppointmentData>();
    private List<UserData> UserDatas { get; set; } = new List<UserData>();
    private ObservableCollection<ChatMessage> chatMessages = new ObservableCollection<ChatMessage>();
    string myUrl =
    "https://nusmods.com/timetable/sem-2/share?CS1231S=TUT:05,LEC:1&CS2030S=REC:06,LAB:16B,LEC:1&CS2100=LAB:07,TUT:17,LEC:1&ES1103=SEC:A07&MA1521=LEC:1,TUT:6";

    private string ToastContent { get; set; } = "Action completed";
    SfToast ToastObj = new SfToast();
    private bool _dialogVisible = true;
    private bool DialogVisible
    {
        get { return Username == string.Empty ? true : _dialogVisible; }
        set { _dialogVisible = value; }
    }

    private HubConnection? hubConnection;

    private async void HandleUpdateTimetable(Guid? id)
    {
        //urlString = myUrl;// delete this

        ScheduleData scheduleData = new()
            {
                Name = Username,
                RoomID = RoomID!,
                Event = ScheduleEvent.Event.Timetable,
                EventType = id == null ? ScheduleEvent.EventType.Add : ScheduleEvent.EventType.Delete,
                TimetableLinks = new List<TimetableLink>()
                    {
                        new TimetableLink()
                    {
                        Name = Username,
                        Url = urlString,
                        OwerID = userData.Id,
                        Id = id == null ? Guid.NewGuid() : (Guid)id!
                    }
                }
            };
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", scheduleData);
        }
        urlString = "";


    }

    private async void AddTimeTable(string toast, List<TimetableLink> timetableLinks, string name)
    {
        try
        {
            ModuleToSchedule moduleToSchedule = new ModuleToSchedule();
            await moduleToSchedule.DecodeTimetables(timetableLinks);
            moduleToSchedule.Data.AddRange(DataSource);
            DataSource = moduleToSchedule.Data;
            Timetables.AddRange(timetableLinks);
            ToastContent = toast;
        }
        catch
        {
            ToastContent = $"{name} has Input an Invalid Timetable Url";
        }
        finally
        {
            this.StateHasChanged();
            await this.ToastObj.ShowAsync();
            ToastContent = "";
        }
    }
    private async void RemoveTimeTable(string toast, List<TimetableLink> timetableLinks)
    {
        Timetables.RemoveAll(t => timetableLinks.Any(a => a.Id == t.Id));
        var apts = DataSource.ToList();
        apts.RemoveAll(d => timetableLinks.Any(a => a.Id == d.TimeTableLinkId));
        DataSource = apts;
        ToastContent = toast;
        this.StateHasChanged();
        await this.ToastObj.ShowAsync();
        ToastContent = "";
    }
    public async void OnActionBegin(ActionEventArgs<AppointmentData> args)
    {


        if (hubConnection is not null
        && (args.ActionType == ActionType.EventCreate || args.ActionType == ActionType.EventChange || args.ActionType ==
        ActionType.EventRemove))
        {
            args.Cancel = true;
            ScheduleData scheduleData = new ScheduleData()
                {
                    Name = Username,
                    RoomID = RoomID!,
                    Event = ScheduleEvent.Event.Appointment
                };

            switch (args.ActionType)
            {
                case (ActionType.EventCreate):
                    args.AddedRecords.ForEach(v =>
                    {
                        v.Subject = $"{Username} {v.Subject}";
                        v.UserDataId = userData.Id;
                    });
                    scheduleData.Appointments = args.AddedRecords;
                    scheduleData.EventType = ScheduleEvent.EventType.Add;
                    break;
                case (ActionType.EventChange):
                    scheduleData.Appointments = args.ChangedRecords;
                    scheduleData.EventType = ScheduleEvent.EventType.Edit;
                    break;
                case (ActionType.EventRemove):
                    scheduleData.Appointments = args.DeletedRecords;
                    scheduleData.EventType = ScheduleEvent.EventType.Delete;
                    break;
                default:
                    break;
            }
            await hubConnection.SendAsync("SendMessage", scheduleData);
        }



    }

    public bool IsConnected =>
    hubConnection?.State == HubConnectionState.Connected;
    protected async override void OnInitialized()
    {
        MenuItemState.OnChange += StateHasChanged;

        MenuItemState.SetCurrentURL("schedule");
        RoomID = RoomID == null ? Guid.NewGuid().ToString() : RoomID;
        NavigationManager.NavigateTo($"/schedule/{RoomID}");

        //hubConnection = new HubConnectionBuilder()
        //.WithUrl(NavigationManager.ToAbsoluteUri("https:localhost:7104/chathub"))
        //.Build();
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        .Build();
        hubConnection.On<ScheduleData>("ReceiveMessage", async (scheduleData) =>
        {
            switch (scheduleData.Event)
            {
                case (ScheduleEvent.Event.Timetable):
                    switch (scheduleData.EventType)
                    {
                        case (ScheduleEvent.EventType.Add):
                            AddTimeTable("Table Added", scheduleData.TimetableLinks, scheduleData.Name!);
                            break;
                        case (ScheduleEvent.EventType.Delete):
                            RemoveTimeTable("Table Deleted", scheduleData.TimetableLinks);
                            break;
                    }
                    UpdateCount = UpdateCount + 1;
                    break;

                case (ScheduleEvent.Event.UserEvent):
                    switch (scheduleData.EventType)
                    {
                        case (ScheduleEvent.EventType.Add):
                            scheduleData.UserDatas.AddRange(UserDatas);
                            UserDatas = scheduleData.UserDatas;
                            break;
                    }
                    UpdateCount = UpdateCount + 1;
                    StateHasChanged();

                    break;
                case (ScheduleEvent.Event.Appointment):
                    switch (scheduleData.EventType)
                    {
                        case (ScheduleEvent.EventType.Add):
                            scheduleData.Appointments.AddRange(DataSource);

                            DataSource = scheduleData.Appointments;
                            ToastContent = "Apt Added";

                            break;
                        case (ScheduleEvent.EventType.Delete):
                            DataSource = DataSource.Where(d => !scheduleData.Appointments.Any(x => x.Id == d.Id)).ToList();
                            ToastContent = "Apt Deleted";

                            break;
                        case (ScheduleEvent.EventType.Edit):
                            scheduleData.Appointments.AddRange(DataSource.Where(d => !scheduleData.Appointments.Any(x => x.Id == d.Id)).ToList());
                            DataSource = scheduleData.Appointments;
                            ToastContent = "Apt Edited";
                            break;
                        default:
                            break;
                    }
                    UpdateCount = UpdateCount + 1;
                    StateHasChanged();
                    await this.ToastObj.ShowAsync();
                    ToastContent = "";
                    break;
                case (ScheduleEvent.Event.Planting):
                    if (hubConnection != null)
                    {
                        switch (scheduleData.EventType)
                        {
                            case (ScheduleEvent.EventType.SeedRequest):
                                scheduleData.UpdateCount = UpdateCount;
                                scheduleData.EventType = ScheduleEvent.EventType.SeedInfo;
                                await hubConnection.SendAsync("PlantingMessage", scheduleData);
                                break;
                            case (ScheduleEvent.EventType.SeedInfo):
                                if (UpdateCount < scheduleData.UpdateCount)
                                {
                                    UpdateCount += scheduleData.UpdateCount;
                                    scheduleData.EventType = ScheduleEvent.EventType.SeedAccept;
                                    await hubConnection.SendAsync("PlantingMessage", scheduleData);
                                }
                                break;
                            case (ScheduleEvent.EventType.SeedAccept):
                                scheduleData.EventType = ScheduleEvent.EventType.Seeding;
                                scheduleData.Appointments = DataSource.ToList();
                                scheduleData.UserDatas = UserDatas.ToList();
                                scheduleData.TimetableLinks = Timetables.ToList();
                                scheduleData.ChatMessages = chatMessages.ToList();
                                await hubConnection.SendAsync("PlantingMessage", scheduleData);
                                break;
                            case (ScheduleEvent.EventType.Seeding):
                                scheduleData.UserDatas.AddRange(UserDatas.ToList());
                                UserDatas = scheduleData.UserDatas;
                                Timetables = scheduleData.TimetableLinks;
                                DataSource = scheduleData.Appointments;
                                scheduleData.ChatMessages.ForEach(c => chatMessages.Add(c));
                                ToastContent = "Room History loaded";
                                StateHasChanged();
                                await this.ToastObj.ShowAsync();
                                ToastContent = "";
                                break;
                            default:
                                break;
                        }

                    }
                    break;

                default:
                    Console.WriteLine($"Unkown {scheduleData}");
                    break;
            }
        });
        hubConnection.On<List<ChatMessage>>("ReceiveChat", (chatMsg) =>
        {
            chatMsg.ForEach(c => chatMessages.Add(c));
            this.StateHasChanged();
            chatInput.FocusAsync();
        });
        await hubConnection.StartAsync();
        await JoinRoom();

        //set default;
        urlString = myUrl;
        HandleUpdateTimetable(null);
    }
    private async Task JoinRoom()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("JoinRoom", RoomID);
        }
    }
    public async void Dispose()
    {
        MenuItemState.OnChange -= StateHasChanged;

        if (hubConnection is not null)
        {
            if (!string.IsNullOrWhiteSpace(RoomID)){
                await hubConnection.SendAsync("LeaveRoom", RoomID);
            }
            await hubConnection.DisposeAsync();
        }
       
    }
    SfSidebar sidebarObj = new SfSidebar();

    private void onSidebarCreate()
    {
        CloseSidebar();
    }
    private void CloseSidebar()
    {
        //MenuItemState.ToggleSidebar = !MenuItemState.ToggleSidebar;
    }
    private async void OnSend()
    {
        if (chatInput.Value != string.Empty && hubConnection is not null)
        {
            var chats = new List<ChatMessage>(){
                new ChatMessage(){
                SenderId = userData.Id,
                Name = userData.Name,
                Text = chatInput.Value
                }
            };
            await hubConnection.SendAsync("SendChat", chats, userData.RoomID);

        }

    }

}